// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  isBarber      Boolean  @default(false)
  barbershopID  String?         
  barbershop    Barbershop?   @relation(fields: [barbershopID], references: [id], name: "BarbershopUsers")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  bookings      Booking[]
  password      String @default("123")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Barbershop {
  id       String    @id @default(uuid())
  name     String
  address  String
  imageUrl String
  services Service[]
  bookings Booking[]
  barbers  User[]    @relation("BarbershopUsers") 
}

model Service {
  id           String     @id @default(uuid())
  name         String
  price        Decimal    @db.Decimal(10, 2)
  barbershopID String
  barbershop   Barbershop @relation(fields: [barbershopID], references: [id])
  description  String
  bookings     Booking[]
  imageUrl     String
}

model Booking {
  id           String     @id @default(uuid())
  userID       String
  user         User       @relation(fields: [userID], references: [id])
  serviceID    String
  service      Service    @relation(fields: [serviceID], references: [id])
  date         DateTime
  barbershopID String
  barbershop   Barbershop @relation(fields: [barbershopID], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
